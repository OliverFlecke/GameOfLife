{"version":3,"sources":["App.module.scss","components/Cell.tsx","components/GameOfLifeGrid.tsx","components/GameOfLife.tsx","App.tsx","serviceWorker.ts","index.tsx","components/GameOfLifeGrid.module.scss","components/Cell.module.scss"],"names":["module","exports","container","Cell","_React$PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","onClick","props","toggle","className","isAlive","styles","React","PureComponent","GameOfLifeGrid","_React$Component","_this","call","state","cells","Array","size","fill","map","setInterval","update","updateInterval","renderGrid","_this2","row","y","renderRow","_this3","alive","x","Cell_Cell","toggleCell","_this4","setState","_this5","currentIteration","JSON","parse","stringify","nextIteration","forEach","neighborsAlive","neighbors","_ref","_ref2","slicedToArray","neighborX","neighborY","filter","living","length","_this6","directions","i","j","reduce","acc","current","concat","Component","GameOfLife","GameOfLifeGrid_GameOfLifeGrid","App","GameOfLife_GameOfLife","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","grid","dead"],"mappings":"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","file":"static/js/main.19fc41e6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3sQE2\"};","import React from 'react';\nimport * as styles from './Cell.module.scss';\n\ninterface CellProps {\n  isAlive: boolean;\n  toggle: () => void;\n}\n\nexport class Cell extends React.PureComponent<CellProps> {\n  public render() {\n    return (\n      <div\n        onClick={this.props.toggle}\n        className={this.props.isAlive ? styles.alive : styles.dead}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport { Cell } from './Cell';\nimport * as styles from './GameOfLifeGrid.module.scss';\n\ninterface GameOfLifeGridProps {\n  size: number;\n  updateInterval: number;\n}\n\ninterface GameOfLifeGridState {\n  cells: boolean[][];\n}\n\nexport class GameOfLifeGrid extends React.Component<\n  GameOfLifeGridProps,\n  GameOfLifeGridState\n> {\n  public constructor(props: GameOfLifeGridProps) {\n    super(props);\n\n    this.state = {\n      cells: new Array(this.props.size)\n        .fill(null)\n        .map(() => new Array(this.props.size).fill(null).map(() => false)),\n    };\n\n    setInterval(() => this.update(), this.props.updateInterval);\n  }\n\n  public render() {\n    return (\n      <div className={styles.container}>\n        <div className={styles.grid}>{this.renderGrid(this.state.cells)}</div>\n      </div>\n    );\n  }\n\n  private renderGrid(cells: boolean[][]) {\n    return this.state.cells.map((row: boolean[], y: number) => (\n      <div key={y} className={styles.row}>\n        {this.renderRow(row, y)}\n      </div>\n    ));\n  }\n\n  private renderRow(row: boolean[], y: number) {\n    return row.map((alive: boolean, x: number) => (\n      <Cell key={x} isAlive={alive} toggle={this.toggleCell(x, y)} />\n    ));\n  }\n\n  private toggleCell(x: number, y: number) {\n    return () => {\n      const cells = this.state.cells;\n      cells[y][x] = !cells[y][x];\n\n      this.setState({ cells });\n    };\n  }\n\n  private update() {\n    const currentIteration = JSON.parse(JSON.stringify(this.state.cells));\n    const nextIteration = JSON.parse(JSON.stringify(this.state.cells));\n\n    currentIteration.forEach((row: boolean[], y: number) => {\n      row.forEach((alive: boolean, x: number) => {\n        const neighborsAlive = this.neighborsAlive(x, y, currentIteration);\n\n        if (alive) {\n          if (neighborsAlive < 2) {\n            nextIteration[y][x] = false;\n          } else if (neighborsAlive === 2 || neighborsAlive === 3) {\n            nextIteration[y][x] = true;\n          } else if (neighborsAlive > 3) {\n            nextIteration[y][x] = false;\n          }\n        } else {\n          if (neighborsAlive === 3) {\n            nextIteration[y][x] = true;\n          }\n        }\n      });\n    });\n\n    this.setState({ cells: nextIteration });\n  }\n\n  private neighborsAlive(x: number, y: number, cells: boolean[][]) {\n    return this.neighbors(x, y)\n      .map(([neighborX, neighborY]) => cells[neighborY][neighborX])\n      .filter(living => living).length;\n  }\n\n  private neighbors(x: number, y: number): number[][] {\n    const directions = [-1, 0, 1];\n\n    return directions\n      .filter(i => x + i >= 0 && x + i < this.props.size)\n      .map(i =>\n        directions\n          .filter(j => y + j >= 0 && y + j < this.props.size)\n          .filter(j => !(j === 0 && i === 0))\n          .map(j => [x + i, y + j]),\n      )\n      .reduce((acc, current) => acc.concat(current), []);\n  }\n}\n","import React from 'react';\nimport { GameOfLifeGrid } from './GameOfLifeGrid';\n\nexport class GameOfLife extends React.PureComponent {\n  public render() {\n    return (\n      <div>\n        <GameOfLifeGrid size={20} updateInterval={1000} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport * as styles from './App.module.scss';\nimport { GameOfLife } from './components/GameOfLife';\n\nclass App extends Component {\n  public render() {\n    return (\n      <div className={styles.container}>\n        <h1>Conway's Game of Life</h1>\n        <GameOfLife />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line:no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line:no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line:no-console\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // tslint:disable-next-line:no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line:no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GameOfLifeGrid_container__1vGVm\",\"grid\":\"GameOfLifeGrid_grid__3hy0p\",\"row\":\"GameOfLifeGrid_row__2VxwC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alive\":\"Cell_alive__LmNTA\",\"dead\":\"Cell_dead__2yELb\"};"],"sourceRoot":""}