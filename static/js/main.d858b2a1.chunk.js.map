{"version":3,"sources":["App.module.scss","components/Cell.tsx","components/GameOfLifeGrid.tsx","components/GameOfLife.tsx","App.tsx","serviceWorker.ts","index.tsx","components/GameOfLifeGrid.module.scss","components/GameOfLife.module.scss","components/Cell.module.scss"],"names":["module","exports","container","Cell","_React$PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","onClick","props","toggle","className","isAlive","styles","React","PureComponent","GameOfLifeGrid","_React$Component","_this","call","timer","state","cells","Array","size","fill","map","_this2","isRunning","clearInterval","undefined","setInterval","update","updateInterval","renderGrid","_this3","row","y","renderRow","_this4","alive","x","Cell_Cell","toggleCell","_this5","setState","_this6","currentIteration","JSON","parse","stringify","nextIteration","forEach","neighborsAlive","neighbors","_ref","_ref2","slicedToArray","neighborX","neighborY","filter","living","length","_this7","directions","i","j","reduce","acc","current","concat","Component","GameOfLife","togglePause","speed","GameOfLifeGrid_GameOfLifeGrid","renderGameRules","App","GameOfLife_GameOfLife","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","grid","gameRules","gameControls","dead"],"mappings":"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","file":"static/js/main.d858b2a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3sQE2\"};","import React from 'react';\nimport * as styles from './Cell.module.scss';\n\ninterface CellProps {\n  isAlive: boolean;\n  toggle: () => void;\n}\n\nexport class Cell extends React.PureComponent<CellProps> {\n  public render() {\n    return (\n      <div\n        onClick={this.props.toggle}\n        className={this.props.isAlive ? styles.alive : styles.dead}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport { Cell } from './Cell';\nimport * as styles from './GameOfLifeGrid.module.scss';\n\ninterface GameOfLifeGridProps {\n  size: number;\n  updateInterval: number;\n  isRunning: boolean;\n}\n\ninterface GameOfLifeGridState {\n  cells: boolean[][];\n}\n\nexport class GameOfLifeGrid extends React.Component<\n  GameOfLifeGridProps,\n  GameOfLifeGridState\n> {\n  private timer?: NodeJS.Timeout;\n\n  public constructor(props: GameOfLifeGridProps) {\n    super(props);\n\n    this.state = {\n      cells: new Array(this.props.size)\n        .fill(null)\n        .map(() => new Array(this.props.size).fill(null).map(() => false)),\n    };\n  }\n\n  public render() {\n    if (!this.props.isRunning && this.timer) {\n      clearInterval(this.timer);\n      this.timer = undefined;\n    } else if (this.props.isRunning && !this.timer) {\n      this.timer = setInterval(() => this.update(), this.props.updateInterval);\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.grid}>{this.renderGrid(this.state.cells)}</div>\n      </div>\n    );\n  }\n\n  private renderGrid(cells: boolean[][]) {\n    return this.state.cells.map((row: boolean[], y: number) => (\n      <div key={y} className={styles.row}>\n        {this.renderRow(row, y)}\n      </div>\n    ));\n  }\n\n  private renderRow(row: boolean[], y: number) {\n    return row.map((alive: boolean, x: number) => (\n      <Cell key={x} isAlive={alive} toggle={this.toggleCell(x, y)} />\n    ));\n  }\n\n  private toggleCell(x: number, y: number) {\n    return () => {\n      const cells = this.state.cells;\n      cells[y][x] = !cells[y][x];\n\n      this.setState({ cells });\n    };\n  }\n\n  private update() {\n    const currentIteration = JSON.parse(JSON.stringify(this.state.cells));\n    const nextIteration = JSON.parse(JSON.stringify(this.state.cells));\n\n    currentIteration.forEach((row: boolean[], y: number) => {\n      row.forEach((alive: boolean, x: number) => {\n        const neighborsAlive = this.neighborsAlive(x, y, currentIteration);\n\n        if (alive) {\n          if (neighborsAlive < 2) {\n            nextIteration[y][x] = false;\n          } else if (neighborsAlive === 2 || neighborsAlive === 3) {\n            nextIteration[y][x] = true;\n          } else if (neighborsAlive > 3) {\n            nextIteration[y][x] = false;\n          }\n        } else {\n          if (neighborsAlive === 3) {\n            nextIteration[y][x] = true;\n          }\n        }\n      });\n    });\n\n    this.setState({ cells: nextIteration });\n  }\n\n  private neighborsAlive(x: number, y: number, cells: boolean[][]) {\n    return this.neighbors(x, y)\n      .map(([neighborX, neighborY]) => cells[neighborY][neighborX])\n      .filter(living => living).length;\n  }\n\n  private neighbors(x: number, y: number): number[][] {\n    const directions = [-1, 0, 1];\n\n    return directions\n      .filter(i => x + i >= 0 && x + i < this.props.size)\n      .map(i =>\n        directions\n          .filter(j => y + j >= 0 && y + j < this.props.size)\n          .filter(j => !(j === 0 && i === 0))\n          .map(j => [x + i, y + j]),\n      )\n      .reduce((acc, current) => acc.concat(current), []);\n  }\n}\n","import React from 'react';\nimport * as styles from './GameOfLife.module.scss';\nimport { GameOfLifeGrid } from './GameOfLifeGrid';\n\ninterface GameOfLifeState {\n  isRunning: boolean;\n  speed: number;\n  size: number;\n}\n\nexport class GameOfLife extends React.PureComponent<{}, GameOfLifeState> {\n  public constructor(props: any) {\n    super(props);\n\n    this.state = {\n      isRunning: false,\n      speed: 500,\n      size: 20,\n    };\n  }\n\n  public render() {\n    return (\n      <div>\n        <GameOfLifeGrid\n          size={this.state.size}\n          updateInterval={this.state.speed}\n          isRunning={this.state.isRunning}\n        />\n        <div className={styles.gameControls}>\n          <button onClick={this.togglePause}>\n            {this.state.isRunning ? 'Pause' : 'Start'}\n          </button>\n        </div>\n\n        {this.renderGameRules()}\n      </div>\n    );\n  }\n\n  private togglePause = () => {\n    this.setState({ isRunning: !this.state.isRunning });\n  };\n\n  private renderGameRules() {\n    return (\n      <div className={styles.gameRules}>\n        <p>\n          The state of each cell only depends on the state from itself and it's\n          neighbors in the past iteration. Neighbors of a cell is every cell\n          that are horizontally, vertically or diagonally adjacent to the cell.\n        </p>\n        <h3>\n          The cell's state in the next iteration is determined by the following\n          rules:\n        </h3>\n        <ol>\n          <li>\n            Any live cell with fewer than two live neighbors dies, as if by\n            underpopulation.\n          </li>\n          <li>\n            Any live cell with two or three live neighbors lives on to the next\n            generation.\n          </li>\n          <li>\n            Any live cell with more than three live neighbors dies, as if by\n            overpopulation.\n          </li>\n          <li>\n            Any dead cell with exactly three live neighbors becomes a live cell,\n            as if by reproduction.\n          </li>\n        </ol>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport * as styles from './App.module.scss';\nimport { GameOfLife } from './components/GameOfLife';\n\nclass App extends Component {\n  public render() {\n    return (\n      <div className={styles.container}>\n        <h1>Conway's Game of Life</h1>\n        <GameOfLife />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line:no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line:no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line:no-console\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // tslint:disable-next-line:no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line:no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GameOfLifeGrid_container__1vGVm\",\"grid\":\"GameOfLifeGrid_grid__3hy0p\",\"row\":\"GameOfLifeGrid_row__2VxwC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameRules\":\"GameOfLife_gameRules__-iZPc\",\"gameControls\":\"GameOfLife_gameControls__2KpC5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alive\":\"Cell_alive__LmNTA\",\"dead\":\"Cell_dead__2yELb\"};"],"sourceRoot":""}